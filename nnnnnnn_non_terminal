CREATE PROCEDURE EDLRETAILUSER.TEST_MA_R_LC_MACHINE_NON_TERMINAL_EVENTS_F(
	BRAND NUMBER(10,0),
	IN_START_DATE DATE,
	IN_END_DATE DATE
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE

BUS_FUN varchar default 'FOBT-';
FN_CD varchar(10);
BR_CD number(10,0);
GRP varchar default '<grp>';
NMSP varchar default 'EDLRETAILDB.EDLRETAILUSER';
TNAME varchar default 'MA_R_LC_MACHINE_NON_TERMINAL_EVENTS_F';
SPNAME varchar default 'SP_MA_R_LC_MACHINE_NON_TERMINAL_EVENTS_F';
STMT_LOG varchar(500);
PROC_OP varchar;


BEGIN

STMT_LOG := IN_START_DATE;
BR_CD := BRAND;
FN_CD := case when TNAME LIKE '%R_L_IRE%' and brand =2 then 'LAD_IRE' when brand = 2 then 'LAD' when brand = 1 then 'COR' else '' END ;
CALL EDLRETAILUSER.SP_EDL_PROC_CNTL_LOG(0, :BUS_FUN || :FN_CD, :GRP, :SPNAME, :NMSP, :TNAME, :IN_START_DATE, :IN_END_DATE, :STMT_LOG, :PROC_OP);

INSERT INTO EDLRETAILPIITABLES.MA_R_LC_MACHINE_NON_TERMINAL_EVENTS_F
SELECT *
FROM
 (SELECT TF.BRAND,
         CASE
             WHEN TF.brand = 1 THEN 'C'
             WHEN TF.brand = 2 THEN 'L'
             ELSE ''
         END||TRIM(shop_ref_key)AS SHOPCODE,
              901 AS TERMINAL_REF_KEY,
              TF.UNIQUE_TRANSACTION_ID AS TRANSACTION_ID,
              TL.TRANSACTION_TYPE_ID AS TRANSACTION_TYPE_ID,
              TL.TRANSACTION_TYPE_CODE AS TRNXTYPE_CL,
              TL.TRANSACTION_TYPE_NAME,
              USERNAME,
              TF.TERMINAL_TRANSACTION_DATE AS TS,
              TF.TRANSACTION_AMOUNT_GBP AS TRANSACTION_AMOUNT,
              V.VOUCHER_ID AS ACCOUNT_NO,
              TF.LINKED_TRANSACTION_ID AS LINKEDTRNX_ID,
              CAST(CAST(CAST(CONVERT_TIMEZONE('Europe/London', CURRENT_TIMESTAMP()) AS TIMESTAMP(0))AS DATE) AS INTEGER FORMAT '999999')AS INSERTED_USER,
              CAST(CONVERT_TIMEZONE('Europe/London', CURRENT_TIMESTAMP()) AS TIMESTAMP(0))AS INSERTED_DATE,
              TF.EVENT_DATE AS EVENT_DATE,
              CASE
                  WHEN TF.brand = 1 THEN 6
                  WHEN TF.BRAND = 2 THEN 8
              END AS batch_identifier
  FROM EDLRETAILVIEWSETL.MA_R_LC_CASH_IN_CASH_OUT_F TF
  LEFT JOIN EDLRETAILVIEWSETL.MA_R_LC_VOUCHER_D V ON V.VOUCHER_REF_KEY = TF.VOUCHER_REF_KEY
  LEFT JOIN EDLRETAILVIEWSETL.MA_R_LC_PROMOTION_D CP ON CP.PROMOTION_REF_KEY = TF.PROMOTION_REF_KEY
  AND CP.PROMOTION_ID <>'-1'
  AND cp.brand = 1
  AND tf.brand = 1
  LEFT JOIN EDLRETAILVIEWSETL.MA_R_LC_CICO_TRANSACTN_TYPE_D CICO_TL ON CICO_TL.TRANSACTION_TYPE_REF_KEY=TF.TRANSACTION_TYPE_REF_KEY
  LEFT JOIN EDLRETAILVIEWSETL.MA_R_LC_TRANSACTION_LOADTYPE_D TL ON CICO_TL.TRANSACTION_CLASSIFIER_CODE = TL.TRANSACTION_TYPE_CODE WHERE(1=1)
  AND TF.BRAND = :BRAND
  AND TL.TRANSACTION_TYPE_CODE IN('TXT:PTF',
                                  'TXT:RIN',
                                  'TXT:PTT',
                                  'TXT:RCPO')
  AND TF.INSERTED_USER =
   (SELECT LOAD_KEY
    FROM EDLRETAILVIEWSETL.MA_ETL_PARAMETER
    WHERE LOADING_FLAG = 1
     AND TASK_ID = 2
     AND brand = :BRAND))S
WHERE NOT EXISTS
  (SELECT EVENT_DATE, TRANSACTION_ID, BRAND, SHOPCODE
   FROM EDLRETAILVIEWSETL.MA_R_LC_MACHINE_NON_TERMINAL_EVENTS_F z
   WHERE z.EVENT_DATE = S.EVENT_DATE
    AND z.TRANSACTION_ID = S.TRANSACTION_ID
    AND z.SHOPCODE = S.SHOPCODE);
PROC_OP := LAST_QUERY_ID();
SELECT 'Rows Inserted: ' || "number of rows inserted" into :STMT_LOG FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
CALL EDLRETAILUSER.SP_EDL_PROC_CNTL_LOG(5, :BUS_FUN || :FN_CD, :GRP, :SPNAME, :NMSP, :TNAME, :IN_START_DATE, :IN_END_DATE, :STMT_LOG, :PROC_OP);

PROC_OP := LAST_QUERY_ID();
CALL EDLRETAILUSER.SP_EDL_PROC_CNTL_LOG(1, :BUS_FUN || :FN_CD, :GRP, :SPNAME, :NMSP, :TNAME, :IN_START_DATE, :IN_END_DATE, :STMT_LOG, :PROC_OP);

RETURN :PROC_OP;

EXCEPTION
WHEN statement_error THEN
    LET PROC_OP := SQLCODE || ': ' || SQLERRM;
    CALL EDLRETAILUSER.SP_EDL_PROC_CNTL_LOG(-1, :BUS_FUN || :FN_CD, :GRP, :SPNAME, :NMSP, :TNAME, :IN_START_DATE, :IN_END_DATE, :STMT_LOG, :PROC_OP);
    RETURN :PROC_OP;

WHEN other THEN
    LET PROC_OP := SQLCODE || ': ' || SQLERRM;
    CALL EDLRETAILUSER.SP_EDL_PROC_CNTL_LOG(-1, :BUS_FUN || :FN_CD, :GRP, :SPNAME, :NMSP, :TNAME, :IN_START_DATE, :IN_END_DATE, :STMT_LOG, :PROC_OP);
    RETURN :PROC_OP;
END
$$;
